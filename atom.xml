<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>赖卓成的博客</title>
  
  <subtitle>愿你出走半生，归来仍是少年。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lzcxfz.github.io/"/>
  <updated>2019-11-05T13:02:16.071Z</updated>
  <id>https://lzcxfz.github.io/</id>
  
  <author>
    <name>赖卓成</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>随机存储器</title>
    <link href="https://lzcxfz.github.io/2019/11/05/%E9%9A%8F%E6%9C%BA%E5%AD%98%E5%82%A8%E5%99%A8/"/>
    <id>https://lzcxfz.github.io/2019/11/05/随机存储器/</id>
    <published>2019-11-05T12:36:00.000Z</published>
    <updated>2019-11-05T13:02:16.071Z</updated>
    
    <content type="html"><![CDATA[<p>半导体存储芯片基本结构:<br><img src="https://cdn.jsdelivr.net/gh/lzcxfz/cdn@master/blogImg/%E5%8D%8A%E5%AF%BC%E4%BD%93%E5%AD%98%E5%82%A8%E8%8A%AF%E7%89%87%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84.png" alt="半导体存储芯片基本结构"></p><a id="more"></a><p>半导体存储芯片基本结构总结:<br><img src="https://cdn.jsdelivr.net/gh/lzcxfz/cdn@master/blogImg/%E5%8D%8A%E5%AF%BC%E4%BD%93%E5%AD%98%E5%82%A8%E8%8A%AF%E7%89%87%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E6%80%BB%E7%BB%93.png" alt="半导体存储芯片基本结构总结"><br>SRAM和DRAM对比:<br><img src="https://cdn.jsdelivr.net/gh/lzcxfz/cdn@master/blogImg/SRAM%E5%92%8CDRAM%E5%AF%B9%E6%AF%94.png" alt="SRAM和DRAM对比"><br>为什么使用行列地址:<br>减少选通线的数量<br><img src="https://cdn.jsdelivr.net/gh/lzcxfz/cdn@master/blogImg/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8%E8%A1%8C%E5%88%97%E5%9C%B0%E5%9D%80.png" alt="答案"><br>DRAM的刷新(重要)：<br><img src="https://cdn.jsdelivr.net/gh/lzcxfz/cdn@master/blogImg/DRAM%E7%9A%84%E5%88%B7%E6%96%B0.png" alt="DRAM的刷新"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;半导体存储芯片基本结构:&lt;br&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/lzcxfz/cdn@master/blogImg/%E5%8D%8A%E5%AF%BC%E4%BD%93%E5%AD%98%E5%82%A8%E8%8A%AF%E7%89%87%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84.png&quot; alt=&quot;半导体存储芯片基本结构&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="笔记" scheme="https://lzcxfz.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="计算机组成原理" scheme="https://lzcxfz.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>数制与编码</title>
    <link href="https://lzcxfz.github.io/2019/10/22/%E6%95%B0%E5%88%B6%E4%B8%8E%E7%BC%96%E7%A0%81/"/>
    <id>https://lzcxfz.github.io/2019/10/22/数制与编码/</id>
    <published>2019-10-22T12:36:00.000Z</published>
    <updated>2019-10-22T13:22:05.235Z</updated>
    
    <content type="html"><![CDATA[<p>8421码：<br><img src="https://cdn.jsdelivr.net/gh/lzcxfz/cdn@master/blogImg/bcd%E7%A0%81.png" alt="bcd"></p><a id="more"></a><p>余3码:在8421的基础上每个数加3<br>ASSIC码共128个，用7位2进制编码表示。<br><img src="https://cdn.jsdelivr.net/gh/lzcxfz/cdn@master/blogImg/ASCII%E7%A0%81.png" alt="ASSIC"><br>字符串存放，大端方式和小端方式<br><img src="https://cdn.jsdelivr.net/gh/lzcxfz/cdn@master/blogImg/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AD%98%E6%94%BE%E6%96%B9%E5%BC%8F.png" alt="字符串"><br>汉字(了解即可)：<br><img src="https://cdn.jsdelivr.net/gh/lzcxfz/cdn@master/blogImg/%E6%B1%89%E5%AD%97.png" alt="汉字"><br>奇偶校验码<br><img src="https://cdn.jsdelivr.net/gh/lzcxfz/cdn@master/blogImg/%E5%A5%87%E5%81%B6%E6%A0%A1%E9%AA%8C%E7%A0%81.png" alt="奇偶校验"><br>海明码简介：<br><img src="https://cdn.jsdelivr.net/gh/lzcxfz/cdn@master/blogImg/%E6%B5%B7%E6%98%8E%E7%A0%81%E7%AE%80%E4%BB%8B.png" alt="海明码简介"><br>海明码求解：<br><img src="https://cdn.jsdelivr.net/gh/lzcxfz/cdn@master/blogImg/%E6%B5%B7%E6%98%8E%E7%A0%81%E6%B1%82%E8%A7%A3.png" alt="海明码求解"><br>海明码纠错：<br><img src="https://cdn.jsdelivr.net/gh/lzcxfz/cdn@master/blogImg/%E6%B5%B7%E6%98%8E%E7%A0%81%E7%BA%A0%E9%94%99.png" alt="海明码纠错"><br>循环冗校验码，求CRC：<br><img src="https://cdn.jsdelivr.net/gh/lzcxfz/cdn@master/blogImg/%E5%BE%AA%E7%8E%AF%E5%86%97%E4%BD%99%E6%A0%A1%E9%AA%8C%E7%A0%81.png" alt="循环冗余校验码"><br>模2除法（期间做不借位减法）余数就是校验码：<br><img src="https://cdn.jsdelivr.net/gh/lzcxfz/cdn@master/blogImg/%E4%B8%8D%E5%80%9F%E4%BD%8D%E9%99%A4%E6%B3%95.png" alt="不借位除法"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;8421码：&lt;br&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/lzcxfz/cdn@master/blogImg/bcd%E7%A0%81.png&quot; alt=&quot;bcd&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="笔记" scheme="https://lzcxfz.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="计算机组成原理" scheme="https://lzcxfz.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>数电基础和一位全加器</title>
    <link href="https://lzcxfz.github.io/2019/10/14/%E6%95%B0%E7%94%B5%E5%9F%BA%E7%A1%80%E5%92%8C%E4%B8%80%E4%BD%8D%E5%85%A8%E5%8A%A0%E5%99%A8/"/>
    <id>https://lzcxfz.github.io/2019/10/14/数电基础和一位全加器/</id>
    <published>2019-10-14T12:36:00.000Z</published>
    <updated>2019-10-14T14:02:21.910Z</updated>
    
    <content type="html"><![CDATA[<p>ALU基本结构：<br><img src="https://cdn.jsdelivr.net/gh/lzcxfz/cdn@master/blogImg/alu%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84.png" alt="ALU基本结构"></p><a id="more"></a><p>逻辑符号：<br><img src="https://cdn.jsdelivr.net/gh/lzcxfz/cdn@master/blogImg/%E9%80%BB%E8%BE%91%E7%AC%A6%E5%8F%B7.png" alt="逻辑符号"><br>左边为国标 右边为国际符号 圈圈表示非<br>复合逻辑：<br><img src="https://cdn.jsdelivr.net/gh/lzcxfz/cdn@master/blogImg/%E7%BB%84%E5%90%88%E9%80%BB%E8%BE%91.png" alt="复合逻辑"><br>异或和与实现加法：<br><img src="https://cdn.jsdelivr.net/gh/lzcxfz/cdn@master/blogImg/%E5%BC%82%E6%88%96%E5%92%8C%E4%B8%8E%E5%AE%9E%E7%8E%B0%E5%8A%A0%E6%B3%95.png" alt="异或和与实现加法"><br>一位二进制加法时，d0位刚好对应’异或’的结果，d1位刚好对应’与’的结果 两位组合就是加法运算的结果<br>半加器<br><img src="https://cdn.jsdelivr.net/gh/lzcxfz/cdn@master/blogImg/%E5%8D%8A%E5%8A%A0%E5%99%A8.png" alt="半加器"><br>一位全加器：<br><img src="https://cdn.jsdelivr.net/gh/lzcxfz/cdn@master/blogImg/%E4%B8%80%E4%BD%8D%E5%85%A8%E5%8A%A0%E5%99%A8.png" alt="一位全加器"><br>ci-1为上一次运算传入的进位，本次运算有两种情况能产生进位，情况1：传入的A和B都为1（Gi） 情况2:上一次传入进位，且本次传入的A和B中其中一个是1（Pi·ci-1）<br>将两种情况做’或’运算 传入下一次进位即可实现进位 所以ci=Gi+Pi·ci-1</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ALU基本结构：&lt;br&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/lzcxfz/cdn@master/blogImg/alu%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84.png&quot; alt=&quot;ALU基本结构&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="笔记" scheme="https://lzcxfz.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="计算机组成原理" scheme="https://lzcxfz.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>java函数重写</title>
    <link href="https://lzcxfz.github.io/2019/09/23/java%E5%87%BD%E6%95%B0%E9%87%8D%E5%86%99/"/>
    <id>https://lzcxfz.github.io/2019/09/23/java函数重写/</id>
    <published>2019-09-23T04:02:00.000Z</published>
    <updated>2019-09-23T04:02:02.840Z</updated>
    
    <content type="html"><![CDATA[<p>设计一个类MagicPotion 蓝瓶，继承Item, 重写effect方法<br>并输出 “蓝瓶使用后，可以回魔法”</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">day0923a</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MagicPotion m=<span class="keyword">new</span> MagicPotion();</span><br><span class="line">m.effect();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Item</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">int</span> price;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"购买"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">effect</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"物品使用后，可以有效果"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MagicPotion</span> <span class="keyword">extends</span> <span class="title">Item</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">effect</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"蓝瓶使用后，可以回魔法"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果:蓝瓶使用后，可以回魔法</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;设计一个类MagicPotion 蓝瓶，继承Item, 重写effect方法&lt;br&gt;并输出 “蓝瓶使用后，可以回魔法”&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="JAVA" scheme="https://lzcxfz.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>接口学习案例</title>
    <link href="https://lzcxfz.github.io/2019/09/22/%E6%8E%A5%E5%8F%A3-%E5%AD%A6%E4%B9%A0%E6%A1%88%E4%BE%8B/"/>
    <id>https://lzcxfz.github.io/2019/09/22/接口-学习案例/</id>
    <published>2019-09-22T09:34:37.504Z</published>
    <updated>2019-09-22T09:36:14.955Z</updated>
    
    <content type="html"><![CDATA[<p>设计一类英雄，能够使用物理攻击，这类英雄在LOL中被叫做AD<br>类：ADHero<br>继承了Hero 类，所以继承了name,hp,armor等属性</p><a id="more"></a><p>实现某个接口，就相当于承诺了某种约定<br>所以，实现了AD这个接口，就必须提供AD接口中声明的方法physicAttack()<br>实现在语法上使用关键字 implements</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">day0922c</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hero</span></span>&#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">float</span> hp;</span><br><span class="line"><span class="keyword">float</span> armor;</span><br><span class="line"><span class="keyword">int</span> moveSpeed;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"英雄名称:"</span>+name+<span class="string">"\n英雄生命值:"</span>+hp+<span class="string">"\n英雄护甲:"</span>+armor+<span class="string">"\n移动速度:"</span>+moveSpeed);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ADHero</span> <span class="keyword">extends</span> <span class="title">Hero</span> <span class="keyword">implements</span> <span class="title">AD</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">physicAttack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"进行物理攻击"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实现某个接口，就相当于承诺了某种约定</span></span><br><span class="line"><span class="comment">//所以，实现了AD这个接口，就必须提供AD接口中声明的方法physicAttack()</span></span><br><span class="line"><span class="comment">//实现在语法上使用关键字 implements</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">AD</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">physicAttack</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">APHero</span> <span class="keyword">extends</span> <span class="title">Hero</span> <span class="keyword">implements</span> <span class="title">AP</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">magicAttack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"进行魔法攻击"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">AP</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">magicAttack</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ADAPHero</span> <span class="keyword">extends</span> <span class="title">Hero</span> <span class="keyword">implements</span> <span class="title">AD</span>,<span class="title">AP</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">magicAttack</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"进行魔法攻击"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">physicAttack</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"进行物理攻击"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;设计一类英雄，能够使用物理攻击，这类英雄在LOL中被叫做AD&lt;br&gt;类：ADHero&lt;br&gt;继承了Hero 类，所以继承了name,hp,armor等属性&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="JAVA" scheme="https://lzcxfz.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>接口练习--设计一个辅助英雄 接口实现技能治疗 </title>
    <link href="https://lzcxfz.github.io/2019/09/22/%E7%BB%83%E4%B9%A0-%E6%8E%A5%E5%8F%A3/"/>
    <id>https://lzcxfz.github.io/2019/09/22/练习-接口/</id>
    <published>2019-09-22T09:31:58.912Z</published>
    <updated>2019-09-22T09:36:05.824Z</updated>
    
    <content type="html"><![CDATA[<p>设计一个治疗者接口：Healer<br>该接口声明有方法： heal()<br>设计一个Support类，代表辅助英雄，继承Hero类，同时实现了Healer这个接口</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hero</span></span>&#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">float</span> hp;</span><br><span class="line"><span class="keyword">float</span> armor;</span><br><span class="line"><span class="keyword">int</span> moveSpeed;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"英雄名称:"</span>+name+<span class="string">"\n英雄生命值:"</span>+hp+<span class="string">"\n英雄护甲:"</span>+armor+<span class="string">"\n移动速度:"</span>+moveSpeed);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Support</span> <span class="keyword">extends</span> <span class="title">Hero</span> <span class="keyword">implements</span> <span class="title">Healer</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">heal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.hp+=<span class="number">50</span>;</span><br><span class="line">System.out.println(<span class="keyword">this</span>.name+<span class="string">"释放了治疗hp+50"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Healer</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">heal</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">day0922d</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span></span>&#123;</span><br><span class="line">Support mgn=<span class="keyword">new</span> Support();</span><br><span class="line">mgn.name=<span class="string">"莫甘娜"</span>;</span><br><span class="line">mgn.hp=<span class="number">200</span>;</span><br><span class="line">mgn.moveSpeed=<span class="number">200</span>;</span><br><span class="line">mgn.armor=<span class="number">500</span>;</span><br><span class="line">mgn.output();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">mgn.heal();</span><br><span class="line">mgn.output();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzcxfz/cdn@master/blogImg/day0922d.png" alt="运行"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;设计一个治疗者接口：Healer&lt;br&gt;该接口声明有方法： heal()&lt;br&gt;设计一个Support类，代表辅助英雄，继承Hero类，同时实现了Healer这个接口&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="JAVA" scheme="https://lzcxfz.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>枚举类型</title>
    <link href="https://lzcxfz.github.io/2019/09/22/%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9E%8B/"/>
    <id>https://lzcxfz.github.io/2019/09/22/枚举类型/</id>
    <published>2019-09-22T03:19:06.357Z</published>
    <updated>2019-09-22T03:20:49.846Z</updated>
    
    <content type="html"><![CDATA[<p>英雄联盟中有这么一些分类<br>TANK (坦克)<br>WIZARD (法师 )<br>ASSASSIN (刺客)<br>ASSIST (辅助)</p><a id="more"></a><p>WARRIOR (近战)<br>RANGED (远程 )<br>PUSH (推进)<br>FARMING (打野)<br>设计一个枚举类型HeroType,使用上述分类作为常量<br>再编写一段switch语句，把每种枚举常量输出为中文字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> HeroType</span><br><span class="line">&#123;TANK,ASSASSIN,WIZARD,ASSIST,WARRIOR,RANGED,PUSH,FARMING&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">day0922b</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">   HeroType type=HeroType.TANK;</span><br><span class="line">   <span class="keyword">switch</span>(type) &#123;</span><br><span class="line">   <span class="keyword">case</span> TANK:</span><br><span class="line">     System.out.println(<span class="string">"坦克"</span>);</span><br><span class="line">     <span class="keyword">break</span>;</span><br><span class="line">   <span class="keyword">case</span> WIZARD:</span><br><span class="line">     System.out.println(<span class="string">"法师"</span>);</span><br><span class="line">     <span class="keyword">break</span>;</span><br><span class="line">   <span class="keyword">case</span> ASSASSIN:</span><br><span class="line">     System.out.println(<span class="string">"刺客"</span>);</span><br><span class="line">     <span class="keyword">break</span>;</span><br><span class="line">   <span class="keyword">case</span> ASSIST:</span><br><span class="line">     System.out.println(<span class="string">"辅助"</span>);</span><br><span class="line">     <span class="keyword">break</span>;</span><br><span class="line">   <span class="keyword">case</span> WARRIOR:</span><br><span class="line">     System.out.println(<span class="string">"近战"</span>);</span><br><span class="line">     <span class="keyword">break</span>;</span><br><span class="line">   <span class="keyword">case</span> RANGED:</span><br><span class="line">     System.out.println(<span class="string">"远程"</span>);</span><br><span class="line">     <span class="keyword">break</span>;</span><br><span class="line">   <span class="keyword">case</span> PUSH:</span><br><span class="line">     System.out.println(<span class="string">"推进"</span>);</span><br><span class="line">     <span class="keyword">break</span>;</span><br><span class="line">   <span class="keyword">case</span> FARMING:</span><br><span class="line">     System.out.println(<span class="string">"打野"</span>);</span><br><span class="line">     <span class="keyword">break</span>;</span><br><span class="line">     <span class="keyword">default</span>:</span><br><span class="line">       System.out.println(<span class="string">"输出错误"</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为:坦克</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;英雄联盟中有这么一些分类&lt;br&gt;TANK (坦克)&lt;br&gt;WIZARD (法师 )&lt;br&gt;ASSASSIN (刺客)&lt;br&gt;ASSIST (辅助)&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="JAVA" scheme="https://lzcxfz.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>单例模式:饿汉模式 懒汉模式</title>
    <link href="https://lzcxfz.github.io/2019/09/22/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://lzcxfz.github.io/2019/09/22/单例模式/</id>
    <published>2019-09-22T02:59:47.012Z</published>
    <updated>2019-09-22T03:59:49.953Z</updated>
    
    <content type="html"><![CDATA[<ol><li>构造方法私有化</li><li>静态属性指向实例</li><li>public static的 getInstance方法，返回第二步的静态属性、<a id="more"></a></li></ol><p>饿汉式是立即加载的方式，无论是否会用到这个对象，都会加载。<br>如果在构造方法里写了性能消耗较大，占时较久的代码，比如建立与数据库的连接，那么就会在启动的时候感觉稍微有些卡顿。</p><p>懒汉式，是延迟加载的方式，只有使用的时候才会加载。 并且有线程安全的考量(鉴于同学们学习的进度，暂时不对线程的章节做展开)。<br>使用懒汉式，在启动的时候，会感觉到比饿汉式略快，因为并没有做对象的实例化。 但是在第一次调用的时候，会进行实例化操作，感觉上就略慢。</p><p>看业务需求，如果业务上允许有比较充分的启动和初始化时间，就使用饿汉式，否则就使用懒汉式</p><p>使用饿汉式单例模式, 把Hero类改造成为单例模式<br>使用懒汉式单例模式，把Item类改造成为单例模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Item</span>//使用饿汉式单例模式, 把<span class="title">Hero</span>类改造成为单例模式</span></span><br><span class="line"><span class="class">  //使用懒汉式单例模式，把<span class="title">Item</span>类改造成为单例模式</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Item</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Item b;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Item <span class="title">getb</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(b==<span class="keyword">null</span>)<span class="comment">//先让b只想NULL 再在调用时让b指向对象 是延迟加载的方式</span></span><br><span class="line">&#123;</span><br><span class="line">b=<span class="keyword">new</span> Item();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">float</span> price;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Hero</span><span class="params">()</span></span>&#123;&#125;<span class="comment">//私有化构造函数,使外部无法实例化对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Hero a= <span class="keyword">new</span> Hero();<span class="comment">//准备一个类属性，指向一个实例化对象。 因为是类属性，所以只有一个</span></span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">float</span> hp;</span><br><span class="line"><span class="keyword">float</span> armor;</span><br><span class="line"><span class="keyword">int</span> moveSpeed;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"英雄名称:"</span>+name+<span class="string">"\n英雄生命值:"</span>+hp+<span class="string">"\n英雄护甲:"</span>+armor+<span class="string">"\n移动速度:"</span>+moveSpeed);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Hero <span class="title">geta</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">a.name=<span class="string">"大龙"</span>;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span>  <span class="title">day0922a</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//通过new实例化会报错</span></span><br><span class="line"><span class="comment">//Hero a=new Hero();</span></span><br><span class="line">Hero a1=Hero.geta();</span><br><span class="line">Hero a2=Hero.geta();</span><br><span class="line">Hero a3=Hero.geta();</span><br><span class="line">Hero a4=Hero.geta();</span><br><span class="line">System.out.println(a1==a2);</span><br><span class="line">System.out.println(a3==a4);</span><br><span class="line"><span class="comment">//Item b=new Item();</span></span><br><span class="line">Item b1= Item.getb();</span><br><span class="line">Item b2= Item.getb();</span><br><span class="line">Item b3= Item.getb();</span><br><span class="line">Item b4= Item.getb();</span><br><span class="line">System.out.println(b1==b2);</span><br><span class="line">System.out.println(b3==b4);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">结果都为为<span class="keyword">true</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;构造方法私有化&lt;/li&gt;
&lt;li&gt;静态属性指向实例&lt;/li&gt;
&lt;li&gt;public static的 getInstance方法，返回第二步的静态属性、
    
    </summary>
    
    
    
      <category term="JAVA" scheme="https://lzcxfz.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>超市购物程序</title>
    <link href="https://lzcxfz.github.io/2019/09/19/%E8%B6%85%E5%B8%82%E8%B4%AD%E7%89%A9%E7%A8%8B%E5%BA%8F/"/>
    <id>https://lzcxfz.github.io/2019/09/19/超市购物程序/</id>
    <published>2019-09-19T12:56:00.000Z</published>
    <updated>2019-09-19T09:28:20.802Z</updated>
    
    <content type="html"><![CDATA[<p>编写一个超市购物程序,实现超市购物功能，购物时如果购物者想要购买的<br>商品在超市中有，则提示购物者买到了某商品，如果超市，里没有，则提示白跑一趟</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">shop0919</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Product p1 = <span class="keyword">new</span> Product();</span><br><span class="line">Product p2 = <span class="keyword">new</span> Product();</span><br><span class="line">Product p3 = <span class="keyword">new</span> Product();</span><br><span class="line">Product p4 = <span class="keyword">new</span> Product();</span><br><span class="line">Product p5 = <span class="keyword">new</span> Product();</span><br><span class="line">p1.setProName(<span class="string">"电视机"</span>);</span><br><span class="line">p2.setProName(<span class="string">"洗衣机"</span>);</span><br><span class="line">p3.setProName(<span class="string">"豆浆机"</span>);</span><br><span class="line">p4.setProName(<span class="string">"空调机"</span>);</span><br><span class="line">p5.setProName(<span class="string">"吹风机"</span>);</span><br><span class="line">Market market=<span class="keyword">new</span> Market();</span><br><span class="line">market.setMarketName(<span class="string">"家乐福"</span>);</span><br><span class="line">market.setProductArr(<span class="keyword">new</span> Product[]&#123;p1,p2,p3,p4,p5&#125;);</span><br><span class="line">Person p=<span class="keyword">new</span> Person();</span><br><span class="line">p.setName(<span class="string">"小明"</span>);</span><br><span class="line">Product result=p.shopping(market,<span class="string">"豆浆"</span>);</span><br><span class="line"><span class="keyword">if</span>(result!=<span class="keyword">null</span>)</span><br><span class="line"></span><br><span class="line">System.out.println(p.getName()+<span class="string">"在"</span>+market.getMarketName()+<span class="string">"买到了"</span>+result.getProName());</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">System.out.println(p.getName()+<span class="string">"在"</span>+market.getMarketName()+<span class="string">"什么也没买到，白跑一趟"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Product</span>//商品类</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String proName;<span class="comment">//商品名</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getProName</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> proName;<span class="comment">//通过公有函数访问私有成员</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProName</span><span class="params">(String proName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.proName=proName;<span class="comment">//公有函数传参 再赋值给私有成员</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Market</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String marketName;<span class="comment">//超市名</span></span><br><span class="line"><span class="keyword">private</span> Product[] productArr;<span class="comment">//超市(对象数组)的仓库,里面有若干商品</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getMarketName</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> marketName;<span class="comment">//超市名</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMarketName</span><span class="params">(String marketName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.marketName=marketName;<span class="comment">//设置超市名</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Product[] getProductArr()<span class="comment">//获取超市仓库</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> productArr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProductArr</span><span class="params">(Product[] productArr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.productArr=productArr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Product <span class="title">sell</span><span class="params">(String name)</span><span class="comment">//卖货</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;productArr.length;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(productArr[i].getProName()==name)</span><br><span class="line"><span class="keyword">return</span> productArr[i];</span><br><span class="line"></span><br><span class="line">&#125;<span class="comment">//遍历输入的商品 有就把这个商品返回</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name=name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Product <span class="title">shopping</span> <span class="params">(Market market,String name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> market.sell(name);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzcxfz/cdn@master/blogImg/shop0919%E4%B9%B0%E5%88%B0%E4%BA%86.png" alt="运行"><br><img src="https://cdn.jsdelivr.net/gh/lzcxfz/cdn@master/blogImg/shop0919%E6%B2%A1%E4%B9%B0%E5%88%B0.png" alt="运行"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;编写一个超市购物程序,实现超市购物功能，购物时如果购物者想要购买的&lt;br&gt;商品在超市中有，则提示购物者买到了某商品，如果超市，里没有，则提示白跑一趟&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="JAVA" scheme="https://lzcxfz.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>java代码执行优先级</title>
    <link href="https://lzcxfz.github.io/2019/09/19/java%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E4%BC%98%E5%85%88%E7%BA%A7/"/>
    <id>https://lzcxfz.github.io/2019/09/19/java代码执行优先级/</id>
    <published>2019-09-19T09:56:00.000Z</published>
    <updated>2019-11-06T11:56:22.573Z</updated>
    
    <content type="html"><![CDATA[<p>对象属性的初始化有三种方式<br>故意把初始化块，放在构造方法下面，问题：<br>这三种方式，谁先执行？谁后执行</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name = <span class="string">"some hero"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hero</span><span class="params">()</span></span>&#123;</span><br><span class="line">        name = <span class="string">"one hero"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        name = <span class="string">"the hero"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>答案:<br>一  类 属性<br>二  静态代码块<br>三 代码块<br>四 构造方法代码块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name =Hero.getName(<span class="string">"属性声明"</span>) ;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hero</span><span class="params">()</span></span>&#123;</span><br><span class="line">        name = Hero.getName(<span class="string">"构造方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        name = Hero.getName(<span class="string">"初始化块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getName</span><span class="params">(String pos)</span></span>&#123;</span><br><span class="line">        String result= <span class="string">"name "</span>+pos;</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Hero();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://stepimagewm.how2j.cn/2262.png" alt="运行"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">static</span></span><br><span class="line">&#123;</span><br><span class="line">x = B.y + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> z=<span class="number">66666</span>;</span><br><span class="line">System.out.println(z);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> y = A.x + <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(String.format(<span class="string">"x=%d,y=%d"</span>,A.x, B.y));</span><br><span class="line"><span class="keyword">new</span> A();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzcxfz/cdn@master/blogImg/%E9%9D%9E%E9%9D%99%E6%80%81%E7%9A%84%E4%BB%A3%E7%A0%81%E5%9D%97%E8%A6%81new%E6%89%8D%E4%BC%9A%E5%8A%A0%E8%BD%BD.png" alt="图"><br>按照以上执行顺序，先执行public static int y = A.x + 1;此时y=0,载入A，x=0+1=1，再回到y = A.x + 1，y=1+1=2<br>静态属性和静态代码块是按顺序执行，哪个在前面就先执行哪个，非静态变量和方法都是要new的</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对象属性的初始化有三种方式&lt;br&gt;故意把初始化块，放在构造方法下面，问题：&lt;br&gt;这三种方式，谁先执行？谁后执行&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="JAVA" scheme="https://lzcxfz.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>在方法中，使参数引用指向一个新的对象</title>
    <link href="https://lzcxfz.github.io/2019/09/16/%E5%9C%A8%E6%96%B9%E6%B3%95%E4%B8%AD%EF%BC%8C%E4%BD%BF%E5%8F%82%E6%95%B0%E5%BC%95%E7%94%A8%E6%8C%87%E5%90%91%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84%E5%AF%B9%E8%B1%A1%EF%BC%8C%E5%A4%96%E9%9D%A2%E7%9A%84%E5%BC%95%E7%94%A8%E6%98%AF%E6%8C%87%E5%90%91%E5%8E%9F%E6%9D%A5%E7%9A%84%E5%AF%B9%E8%B1%A1%EF%BC%9F%E8%BF%98%E6%98%AF%E6%96%B0%E7%9A%84%E5%AF%B9%E8%B1%A1/"/>
    <id>https://lzcxfz.github.io/2019/09/16/在方法中，使参数引用指向一个新的对象，外面的引用是指向原来的对象？还是新的对象/</id>
    <published>2019-09-16T14:07:00.000Z</published>
    <updated>2019-09-16T14:37:37.538Z</updated>
    
    <content type="html"><![CDATA[<p>在方法中，使参数引用指向一个新的对象<br>外面的引用是指向原来的对象？还是新的对象？<br>答：原来的</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String name; <span class="comment">//姓名</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">float</span> hp; <span class="comment">//血量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">float</span> armor; <span class="comment">//护甲</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> moveSpeed; <span class="comment">//移动速度</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hero</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hero</span><span class="params">(String name,<span class="keyword">float</span> hp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.hp = hp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//复活</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">revive</span><span class="params">(Hero h)</span></span>&#123;</span><br><span class="line">        h = <span class="keyword">new</span> Hero(<span class="string">"提莫"</span>,<span class="number">383</span>);</span><br><span class="line">        System.out.println(<span class="string">"复活函数"</span>+h.hp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Hero teemo =  <span class="keyword">new</span> Hero(<span class="string">"提莫"</span>,<span class="number">383</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//受到400伤害，挂了</span></span><br><span class="line">        teemo.hp = teemo.hp - <span class="number">400</span>;</span><br><span class="line"></span><br><span class="line">        teemo.revive(teemo);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"主函数"</span>+teemo.hp);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzcxfz/cdn@master/blogImg/%E5%BC%95%E7%94%A8.jpg" alt="运行图"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在方法中，使参数引用指向一个新的对象&lt;br&gt;外面的引用是指向原来的对象？还是新的对象？&lt;br&gt;答：原来的&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="JAVA" scheme="https://lzcxfz.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>java继承、方法重载</title>
    <link href="https://lzcxfz.github.io/2019/09/16/java%E7%BB%A7%E6%89%BF%E5%92%8C%E6%96%B9%E6%B3%95%E9%87%8D%E8%BD%BD/"/>
    <id>https://lzcxfz.github.io/2019/09/16/java继承和方法重载/</id>
    <published>2019-09-16T09:19:00.000Z</published>
    <updated>2019-09-16T09:25:55.773Z</updated>
    
    <content type="html"><![CDATA[<p>设计一个类Support (辅助英雄)继承Hero，提供一个heal(治疗)方法<br>对Support的heal方法进行重载<br>heal()<br>heal(Hero h) //为指定的英雄加血<br>heal(Hero h, int hp) //为指定的英雄加了hp的血</p><a id="more"></a><p>设计一个类Armor护甲<br>继承Item类，并且额外提供一个属性ac: 护甲等级 int类型<br>实例化出两件护甲<br>名称 价格 护甲等级<br>布甲 300 15<br>锁子甲 500 40</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">设计一个类Armor护甲</span></span><br><span class="line"><span class="comment">继承Item类，并且额外提供一个属性ac: 护甲等级 int类型</span></span><br><span class="line"><span class="comment">实例化出两件护甲</span></span><br><span class="line"><span class="comment">名称 价格 护甲等级</span></span><br><span class="line"><span class="comment">布甲 300 15</span></span><br><span class="line"><span class="comment">锁子甲 500 40</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">day0916</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Armor bujia=<span class="keyword">new</span> Armor();</span><br><span class="line">Armor suozijia=<span class="keyword">new</span> Armor();</span><br><span class="line">bujia.name=<span class="string">"布甲"</span>;</span><br><span class="line">bujia.price=<span class="number">300</span>;</span><br><span class="line">bujia.ac=<span class="number">15</span>;</span><br><span class="line">suozijia.name=<span class="string">"锁子甲"</span>;</span><br><span class="line">suozijia.price=<span class="number">500</span>;</span><br><span class="line">suozijia.ac=<span class="number">40</span>;</span><br><span class="line">System.out.println(<span class="string">"名字:"</span>+bujia.name+<span class="string">" 价格:"</span>+bujia.price+<span class="string">" 护甲等级:"</span>+bujia.ac);</span><br><span class="line">System.out.println(<span class="string">"名字:"</span>+suozijia.name+<span class="string">" 价格:"</span>+suozijia.price+<span class="string">" 护甲等级:"</span>+suozijia.ac);</span><br><span class="line">Hero timo=<span class="keyword">new</span> Hero();</span><br><span class="line">timo.name=<span class="string">"提莫"</span>;</span><br><span class="line">timo.hp=<span class="number">333.0f</span>;</span><br><span class="line">timo.armor=<span class="number">14.0f</span>;</span><br><span class="line">timo.moveSpeed=<span class="number">330</span>;</span><br><span class="line">timo.outPut();</span><br><span class="line">System.out.println(<span class="string">"*****************************"</span>);</span><br><span class="line">Hero gailun=<span class="keyword">new</span> Hero();</span><br><span class="line">gailun.name=<span class="string">"盖伦"</span>;</span><br><span class="line">gailun.hp=<span class="number">616.0f</span>;</span><br><span class="line">gailun.armor=<span class="number">27.0f</span>;</span><br><span class="line">gailun.moveSpeed=<span class="number">250</span>;</span><br><span class="line">gailun.outPut();</span><br><span class="line">System.out.println(<span class="string">"*****************************"</span>);</span><br><span class="line">Support naima=<span class="keyword">new</span> Support();</span><br><span class="line">naima.name=<span class="string">"众星之子"</span>;</span><br><span class="line">naima.hp=<span class="number">345f</span>;</span><br><span class="line">naima.armor=<span class="number">30f</span>;</span><br><span class="line">naima.moveSpeed=<span class="number">400</span>;</span><br><span class="line">naima.heal(timo);</span><br><span class="line">System.out.println(<span class="string">"*****************************"</span>);</span><br><span class="line">System.out.println(<span class="string">"治疗后"</span>);</span><br><span class="line">timo.outPut();</span><br><span class="line">naima.heal(gailun);</span><br><span class="line">System.out.println(<span class="string">"*****************************"</span>);</span><br><span class="line">System.out.println(<span class="string">"治疗后"</span>);</span><br><span class="line">gailun.outPut();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Item</span>//物品类</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">int</span> price;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Armor</span> <span class="keyword">extends</span> <span class="title">Item</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ac;<span class="comment">//护甲等级</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">设计一个类Support (辅助英雄)继承Hero，提供一个heal(治疗)方法</span></span><br><span class="line"><span class="comment">对Support的heal方法进行重载</span></span><br><span class="line"><span class="comment">heal()</span></span><br><span class="line"><span class="comment">heal(Hero h) //为指定的英雄加血</span></span><br><span class="line"><span class="comment">heal(Hero h, int hp) //为指定的英雄加了hp的血</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">float</span> hp;</span><br><span class="line"><span class="keyword">float</span> armor;</span><br><span class="line"><span class="keyword">int</span> moveSpeed;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">outPut</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"英雄名称:"</span>+name+<span class="string">"\n英雄生命值:"</span>+hp+<span class="string">"\n英雄护甲:"</span>+armor+<span class="string">"\n移动速度:"</span>+moveSpeed);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Support</span> <span class="keyword">extends</span> <span class="title">Hero</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String name;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heal</span><span class="params">(Hero...heros)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;heros.length;i++ )<span class="comment">//重载多次 解决累赘</span></span><br><span class="line">&#123;</span><br><span class="line">heros[i].hp+=<span class="number">150</span>;</span><br><span class="line">System.out.println(name+<span class="string">"给"</span>+heros[i].name+<span class="string">"治疗了150生命值"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzcxfz/cdn@master/blogImg/day0916.png" alt="运行">;</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;设计一个类Support (辅助英雄)继承Hero，提供一个heal(治疗)方法&lt;br&gt;对Support的heal方法进行重载&lt;br&gt;heal()&lt;br&gt;heal(Hero h) //为指定的英雄加血&lt;br&gt;heal(Hero h, int hp) //为指定的英雄加了hp的血&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="JAVA" scheme="https://lzcxfz.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>数组：随机数、遍历、反转、冒泡排序、选择排序</title>
    <link href="https://lzcxfz.github.io/2019/09/16/%E6%95%B0%E7%BB%84%EF%BC%9A%E9%9A%8F%E6%9C%BA%E6%95%B0%E3%80%81%E9%81%8D%E5%8E%86%E3%80%81%E5%8F%8D%E8%BD%AC%E3%80%81%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E3%80%81%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/"/>
    <id>https://lzcxfz.github.io/2019/09/16/数组：随机数、遍历、反转、冒泡排序、选择排序/</id>
    <published>2019-09-16T03:36:00.000Z</published>
    <updated>2019-09-18T15:16:22.308Z</updated>
    
    <content type="html"><![CDATA[<p>数组：随机数、遍历、反转、冒泡排序、选择排序</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span>  <span class="title">Arr</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> b[][]=<span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> []a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">a[<span class="number">0</span>]=(<span class="keyword">int</span>)(Math.random()*<span class="number">100</span>);<span class="comment">//Math.random 生成0-1之间的随机数</span></span><br><span class="line">a[<span class="number">1</span>]=(<span class="keyword">int</span>)(Math.random()*<span class="number">100</span>);</span><br><span class="line">a[<span class="number">2</span>]=(<span class="keyword">int</span>)(Math.random()*<span class="number">100</span>);</span><br><span class="line">a[<span class="number">3</span>]=(<span class="keyword">int</span>)(Math.random()*<span class="number">100</span>);</span><br><span class="line">a[<span class="number">4</span>]=(<span class="keyword">int</span>)(Math.random()*<span class="number">100</span>);</span><br><span class="line">a[<span class="number">5</span>]=(<span class="keyword">int</span>)(Math.random()*<span class="number">100</span>);</span><br><span class="line">a[<span class="number">6</span>]=(<span class="keyword">int</span>)(Math.random()*<span class="number">100</span>);</span><br><span class="line">a[<span class="number">7</span>]=(<span class="keyword">int</span>)(Math.random()*<span class="number">100</span>);</span><br><span class="line">a[<span class="number">8</span>]=(<span class="keyword">int</span>)(Math.random()*<span class="number">100</span>);</span><br><span class="line">a[<span class="number">9</span>]=(<span class="keyword">int</span>)(Math.random()*<span class="number">100</span>);</span><br><span class="line">System.out.print(<span class="string">"随机数"</span>);</span><br><span class="line">outPut(a);</span><br><span class="line">max(a);</span><br><span class="line">min(a);</span><br><span class="line">reverse(a);</span><br><span class="line">System.out.print(<span class="string">"反转数组"</span>);</span><br><span class="line">outPut(a);</span><br><span class="line">selectSort(a);</span><br><span class="line">System.out.print(<span class="string">"选择排序后"</span>);</span><br><span class="line">outPut(a);</span><br><span class="line">bubbleSort(a);</span><br><span class="line">System.out.print(<span class="string">"冒泡排序后"</span>);</span><br><span class="line">outPut(a);</span><br><span class="line">init(b);</span><br><span class="line">outPut(b);</span><br><span class="line">max(b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> [][]b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;b.length;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;b[i].length;j++)</span><br><span class="line">    &#123;</span><br><span class="line">b[i][j]=(<span class="keyword">int</span>)(Math.random()*<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> [][]a)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="keyword">int</span> max=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;a[i].length;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(max&lt;a[i][j])</span><br><span class="line">max=a[i][j];</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"最大值:"</span>+max);</span><br><span class="line">&#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">outPut</span><span class="params">(<span class="keyword">int</span> [][]a)</span><span class="comment">//二位数组遍历</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)</span><br><span class="line">&#123;<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;a[i].length;j++)</span><br><span class="line"> &#123;</span><br><span class="line">System.out.print(a[i][j]+<span class="string">" "</span>);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"> System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span> []a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t=a[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length-<span class="number">1</span>;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;a.length-i-<span class="number">1</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[j]&lt;a[j+<span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">t=a[j];</span><br><span class="line">a[j]=a[j+<span class="number">1</span>];</span><br><span class="line">a[j+<span class="number">1</span>]=t;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span> []a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length-<span class="number">1</span>;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=a.length-<span class="number">1</span>;j&gt;i;j--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]&gt;a[j])</span><br><span class="line">&#123;</span><br><span class="line">t=a[i];</span><br><span class="line">a[i]=a[j];</span><br><span class="line">a[j]=t;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> []a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length/<span class="number">2</span>;i++)<span class="comment">//数组反转</span></span><br><span class="line">&#123;<span class="keyword">int</span> t=a[i];</span><br><span class="line">a[i]=a[a.length-<span class="number">1</span>-i];</span><br><span class="line">a[a.length-<span class="number">1</span>-i]=t;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">outPut</span><span class="params">(<span class="keyword">int</span> []a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.print(<span class="string">"遍历:"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)</span><br><span class="line">&#123;</span><br><span class="line">System.out.print(a[i]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">System.out.print("增强型for遍历:");</span></span><br><span class="line"><span class="comment">for(int each:a)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">System.out.print(each+" ");</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> []a)</span><span class="comment">//求最大值函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> max=a[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;a.length;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[j]&gt;max)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">max=a[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"最大值是："</span>+max);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> []a)</span><span class="comment">//求最小值函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> min=a[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;a.length;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[j]&lt;min)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">min=a[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"最小值是："</span>+min);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzcxfz/cdn@master/blogImg/%E6%95%B0%E7%BB%84.png" alt="运行图"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数组：随机数、遍历、反转、冒泡排序、选择排序&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="JAVA" scheme="https://lzcxfz.github.io/tags/JAVA/"/>
    
      <category term="算法" scheme="https://lzcxfz.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>设计一个LOL的英雄类，创建两个英雄对象，一个叫盖伦，一个叫提莫</title>
    <link href="https://lzcxfz.github.io/2019/09/12/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80%E6%A1%88%E4%BE%8B,%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E8%8B%B1%E9%9B%84%E7%B1%BB/"/>
    <id>https://lzcxfz.github.io/2019/09/12/面向对象基础案例,设计一个英雄类/</id>
    <published>2019-09-12T04:36:00.000Z</published>
    <updated>2019-09-12T08:55:42.184Z</updated>
    
    <content type="html"><![CDATA[<p>面向对象基础<br>LOL有很多英雄，比如盲僧，团战可以输，提莫必须死，盖伦，琴女<br>所有这些英雄，都有一些共同的状态<br>比如，他们都有名字，hp，护甲，移动速度等等<br>这样我们就可以设计一种东西，叫做类，代表英雄这样一种事物<br>类： 英雄(Hero)<br>状态： 名字, 血量，护甲，移动速度</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ltem</span>//装备类</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">float</span> price;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span>//英雄类</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">float</span> hp;</span><br><span class="line"><span class="keyword">float</span> armor;<span class="comment">//护甲</span></span><br><span class="line"><span class="keyword">int</span> moveSpeed;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span><span class="comment">//输出函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"英雄名称:"</span>+name+<span class="string">"\n英雄生命值:"</span>+hp+<span class="string">"\n英雄护甲:"</span>+armor+<span class="string">"\n移动速度:"</span>+moveSpeed);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span>  <span class="title">lol</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Hero timo=<span class="keyword">new</span> Hero();</span><br><span class="line">timo.name=<span class="string">"提莫"</span>;</span><br><span class="line">timo.hp=<span class="number">333.0f</span>;</span><br><span class="line">timo.armor=<span class="number">14.0f</span>;</span><br><span class="line">timo.moveSpeed=<span class="number">330</span>;</span><br><span class="line">timo.output();</span><br><span class="line">System.out.println(<span class="string">"*****************************"</span>);</span><br><span class="line">Hero gailun=<span class="keyword">new</span> Hero();</span><br><span class="line">gailun.name=<span class="string">"盖伦"</span>;</span><br><span class="line">gailun.hp=<span class="number">616.0f</span>;</span><br><span class="line">gailun.armor=<span class="number">27.0f</span>;</span><br><span class="line">gailun.moveSpeed=<span class="number">250</span>;</span><br><span class="line">gailun.output();</span><br><span class="line">System.out.println(<span class="string">"*****************************"</span>);</span><br><span class="line">ltem changjian=<span class="keyword">new</span> ltem();</span><br><span class="line">changjian.name=<span class="string">"长剑"</span>;</span><br><span class="line">changjian.price=<span class="number">350.0f</span>;</span><br><span class="line">ltem xueping=<span class="keyword">new</span> ltem();</span><br><span class="line">xueping.name=<span class="string">"血瓶"</span>;</span><br><span class="line">xueping.price=<span class="number">50.0f</span>;</span><br><span class="line">ltem caoxie=<span class="keyword">new</span> ltem();</span><br><span class="line">caoxie.name=<span class="string">"草鞋"</span>;</span><br><span class="line">caoxie.price=<span class="number">300.0f</span>;</span><br><span class="line">System.out.println(changjian.name+<span class="string">"\n"</span>+changjian.price+<span class="string">"\n"</span>+xueping.name+<span class="string">"\n"</span>+xueping.price+<span class="string">"\n"</span>+caoxie.name+<span class="string">"\n"</span>+caoxie.price);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/lzcxfz/cdn@master/blogImg/%E8%8B%B1%E9%9B%84%E7%B1%BB.png" alt="运行"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;面向对象基础&lt;br&gt;LOL有很多英雄，比如盲僧，团战可以输，提莫必须死，盖伦，琴女&lt;br&gt;所有这些英雄，都有一些共同的状态&lt;br&gt;比如，他们都有名字，hp，护甲，移动速度等等&lt;br&gt;这样我们就可以设计一种东西，叫做类，代表英雄这样一种事物&lt;br&gt;类： 英雄(Hero)&lt;br&gt;状态： 名字, 血量，护甲，移动速度&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="JAVA" scheme="https://lzcxfz.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Java学习笔记</title>
    <link href="https://lzcxfz.github.io/2019/09/02/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://lzcxfz.github.io/2019/09/02/Java学习笔记/</id>
    <published>2019-09-02T12:56:00.000Z</published>
    <updated>2019-10-14T13:56:37.622Z</updated>
    
    <content type="html"><![CDATA[<p>1.变量本质上就是代表一个”可操作的存储空间”<br>2.变量名可以为汉字，但不建议, 必须声明和初始化之后才可以使用<br>3.行内注释：/<em>这里写注释</em>/<br>4.局部变量：从声明位置开始，直到方法或语句块执行完毕，局部变量消失<br>  成员变量：对象创建，成员变量也跟着创建。对象消失，成员变量也跟着消失，会自动初始化  bool类型默认为false<br>  <a id="more"></a><br>5.静态变量，从属于类<br>6.final修饰的称为符号常量<br>7.所有变量、方法、类名：见名知意<br>类成员变量：首字母小写和驼峰原则:  monthSalary<br>局部变量：首字母小写和驼峰原则<br>常量：大写字母和下划线：MAX_VALUE<br>类名：首字母大写和驼峰原则:  Man, GoodMan<br>方法名：首字母小写和驼峰原则: run(), runRun()<br>8.八进制0开头 十六进制0x开头 二进制 0b开头<br>9.Java语言的整型常数默认为int型，声明long型常量可以后加‘ l ’或‘ L ’<br>10.float类型赋值时需要添加后缀F/f<br>11.浮点数 不精确 不要用于比较<br>12.CMD运行JAVA出现编码GBK的不可映射字符处理方法：使用-encoding指令指定运行编码为UTF-8<br>  例如:javac -encoding UTF-8 XXX.java<br>13.增强型for循环<br>        for(int each:a)<br>        {<br>            System.out.print(each+” “);//遍历a中元素<br>        }<br>14继承关键字:extends<br>15.for (int i=0;i&lt;heros.length;i++ )//重载多次 解决累赘<br>    {<br>        heros[i].hp+=150;<br>        System.out.println(name+”给”+heros[i].name+”治疗了150生命值”);<br>    }</p><ol start="16"><li>如果一个变量是类类型<br>比如 Hero h = new Hero();<br>我们就管h叫做引用。<br>=不再是赋值的意思<br>=表示指向的意思</li><li>基本类型传参 在方法内，无法修改方法外的基本类型参数(与C语言类似)</li><li>修饰符：<ol><li>属性通常使用private封装起来</li><li>方法一般使用public用于被调用</li><li>会被子类继承的方法，通常使用protected</li></ol></li><li>当一个属性被声明成类属性（静态属性），那么所有的对象，都共享一个值</li><li>类方法： 又叫做静态方法 对象方法： 又叫实例方法，非静态方法<br>访问一个对象方法，必须建立在有一个对象的前提的基础上 访问类方法，不需要对象的存在，直接就访问</li><li>static{<pre><code>itemCapacity = 6;//静态初始化块 初始化</code></pre>}</li><li>对象转型：把右边的当做左边来用<br>   所有的子类转换为父类，都是说得通的<pre><code>父类转子类，要进行强转,不一定说得通</code></pre> 没有继承关系的两个类，互相转换，一定会失败<br> 类转换成接口(向上转型)，实现该接口的函数的类可以转<br>instanceof Hero 判断一个引用所指向的对象，是否是Hero类型，或者Hero的子类</li><li>要实现类的多态，需要如下条件</li><li>父类（接口）引用指向子类对象</li><li>调用的方法有重写</li><li>静态方法可以在不创建对象的情况下调用方法,静态代码块在类加载时执行，静态代码块只执行一次</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.变量本质上就是代表一个”可操作的存储空间”&lt;br&gt;2.变量名可以为汉字，但不建议, 必须声明和初始化之后才可以使用&lt;br&gt;3.行内注释：/&lt;em&gt;这里写注释&lt;/em&gt;/&lt;br&gt;4.局部变量：从声明位置开始，直到方法或语句块执行完毕，局部变量消失&lt;br&gt;  成员变量：对象创建，成员变量也跟着创建。对象消失，成员变量也跟着消失，会自动初始化  bool类型默认为false&lt;br&gt;
    
    </summary>
    
    
    
      <category term="JAVA" scheme="https://lzcxfz.github.io/tags/JAVA/"/>
    
      <category term="笔记" scheme="https://lzcxfz.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>github搭建博客小结</title>
    <link href="https://lzcxfz.github.io/2019/08/25/github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B0%8F%E7%BB%93/"/>
    <id>https://lzcxfz.github.io/2019/08/25/github搭建博客小结/</id>
    <published>2019-08-25T04:36:00.000Z</published>
    <updated>2019-08-27T08:44:01.547Z</updated>
    
    <content type="html"><![CDATA[<p>使用github+hexo搭建个人博客<br>1.申请github账号，创建仓库<br>2.安装node.js<br>3.安装git</p><a id="more"></a><p>4.githubssh配置<br>5.hexo安装：<br>        在blog安装hexo:npm install -g hexo-cli<br>        初始化:hexo init lzcxfz（创建博客根目录）<br>        进入博客目录:cd lzcxfz<br>        安装:npm install<br>        本地测试:hexo server 打开localhost:4000<br>6.提交到github<br>    hexo g生成 hexo d<br>    如果提示：Deployer not found: git<br>    就安装:npm install –save hexo-deployer-git</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用github+hexo搭建个人博客&lt;br&gt;1.申请github账号，创建仓库&lt;br&gt;2.安装node.js&lt;br&gt;3.安装git&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="笔记" scheme="https://lzcxfz.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>汇编C语言混编冒泡排序</title>
    <link href="https://lzcxfz.github.io/2019/05/31/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%20C%E8%AF%AD%E8%A8%80%E6%B7%B7%E5%90%88%E7%BC%96%E7%A8%8B%E3%80%82%E5%AE%9E%E7%8E%B0%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
    <id>https://lzcxfz.github.io/2019/05/31/汇编语言 C语言混合编程。实现冒泡排序/</id>
    <published>2019-05-31T04:19:00.000Z</published>
    <updated>2019-09-10T12:13:43.781Z</updated>
    
    <content type="html"><![CDATA[<p>汇编C语言混编冒泡排序</p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> i;</span><br><span class="line">   <span class="keyword">int</span> a[]=&#123;<span class="number">5</span>,<span class="number">-8</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">1</span>&#125;;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> *p)</span></span>;</span><br><span class="line">   sort(a);</span><br><span class="line">   <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">4</span>; i++)</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"\t%d"</span>, a[i]);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">   <span class="keyword">int</span> n=<span class="number">5</span>;</span><br><span class="line">   _asm</span><br><span class="line">   &#123;</span><br><span class="line">      pushad<span class="comment">//寄存器入栈</span></span><br><span class="line">      mov ebx,p<span class="comment">//此处注意，刚开始我使用的是lea指令，lea指令是取操作数的有效地址，但是p本来就是地址，所以用mov指令。</span></span><br><span class="line">      mov ecx,n<span class="comment">//循环次数</span></span><br><span class="line">      dec ecx<span class="comment">//冒泡排序 外循环循环n-1次  内存循环 次数：n-1-外层循环的当前循环次数</span></span><br><span class="line">   loop1:</span><br><span class="line">      mov edx,ecx<span class="comment">//暂存外层循环次数</span></span><br><span class="line">      mov esi,<span class="number">0</span><span class="comment">//esi清0</span></span><br><span class="line">   loop2:</span><br><span class="line">      mov eax,[ebx+esi]<span class="comment">//将当前数据给eax</span></span><br><span class="line">      cmp eax,[ebx+esi+<span class="number">4</span>]<span class="comment">//当前数据与下一个数据比较</span></span><br><span class="line">      jge next<span class="comment">//如果当前数据大于等于下一个 则跳转下一个</span></span><br><span class="line">      xchg eax,[ebx+esi+<span class="number">4</span>]<span class="comment">//如果当前数据小于下一个数据，则数据交换，先将eax中的数据与下一个数据交换</span></span><br><span class="line">      mov [ebx+esi],eax<span class="comment">//再将eax中的数据给当前数据内存单元</span></span><br><span class="line">   next:</span><br><span class="line">      add esi,<span class="number">4</span><span class="comment">//移动</span></span><br><span class="line">      loop loop2</span><br><span class="line">      mov ecx,edx<span class="comment">//恢复外层循环计数器</span></span><br><span class="line">      loop loop1</span><br><span class="line">      popad</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190531121948310.png" alt="avatar"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;汇编C语言混编冒泡排序&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="C语言" scheme="https://lzcxfz.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
      <category term="汇编" scheme="https://lzcxfz.github.io/tags/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>在Visual C程序中输入三个整数，然后调用汇编子程序求三个数中的最大值，结果在主程序中显示</title>
    <link href="https://lzcxfz.github.io/2019/05/30/%E5%9C%A8Visual%20C%E7%A8%8B%E5%BA%8F%E4%B8%AD%E8%BE%93%E5%85%A5%E4%B8%89%E4%B8%AA%E6%95%B4%E6%95%B0%EF%BC%8C%E7%84%B6%E5%90%8E%E8%B0%83%E7%94%A8%E6%B1%87%E7%BC%96%E5%AD%90%E7%A8%8B%E5%BA%8F%E6%B1%82%E4%B8%89%E4%B8%AA%E6%95%B0%E4%B8%AD%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC%EF%BC%8C%E7%BB%93%E6%9E%9C%E5%9C%A8%E4%B8%BB%E7%A8%8B%E5%BA%8F%E4%B8%AD%E6%98%BE%E7%A4%BA/"/>
    <id>https://lzcxfz.github.io/2019/05/30/在Visual C程序中输入三个整数，然后调用汇编子程序求三个数中的最大值，结果在主程序中显示/</id>
    <published>2019-05-30T04:36:00.000Z</published>
    <updated>2019-08-27T06:17:13.715Z</updated>
    
    <content type="html"><![CDATA[<p>以下为我个人写的代码：</p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getMax</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> a,b,c;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入三个整数"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"最大值为:%d\n"</span>,getMax(a,b,c));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getMax</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">    <span class="keyword">int</span> max=<span class="number">0</span>;</span><br><span class="line">    _asm</span><br><span class="line">    &#123;</span><br><span class="line">        mov eax,a</span><br><span class="line">        mov ebx,b</span><br><span class="line">        mov ecx,c</span><br><span class="line">        cmp eax,ebx<span class="comment">//a与b比较 若a&gt;b则a与c比较，a&lt;b则b与c比较</span></span><br><span class="line">        jnge two</span><br><span class="line">one:    cmp eax,ecx</span><br><span class="line">        jge ada</span><br><span class="line">two:    cmp ebx,ecx</span><br><span class="line">        jge bda</span><br><span class="line">        jmp cda</span><br><span class="line">ada:    mov max,eax</span><br><span class="line">        jmp end</span><br><span class="line">bda:    mov max,ebx</span><br><span class="line">        jmp end</span><br><span class="line">cda:    mov max,ecx</span><br><span class="line">end:    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (max);</span><br><span class="line">&#125;</span><br><span class="line">老师写的代码：</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">main( )</span><br><span class="line"></span><br><span class="line">&#123;    <span class="keyword">int</span> result,var1,var2,var3;</span><br><span class="line"></span><br><span class="line">     <span class="built_in">scanf</span>(<span class="string">"%d,%d,%d"</span>,&amp;var1,&amp;var2,&amp;var3);</span><br><span class="line"></span><br><span class="line">     _asm&#123;</span><br><span class="line"></span><br><span class="line">     mov eax,var1</span><br><span class="line"></span><br><span class="line">     mov ebx,var2</span><br><span class="line"></span><br><span class="line">     cmp eax,ebx</span><br><span class="line"></span><br><span class="line">     jge next</span><br><span class="line"></span><br><span class="line">     mov eax,ebx</span><br><span class="line"></span><br><span class="line">next:mov ebx,var3</span><br><span class="line"></span><br><span class="line">     cmp eax,ebx</span><br><span class="line"></span><br><span class="line">     jge GR</span><br><span class="line"></span><br><span class="line">     mov eax,ebx</span><br><span class="line"></span><br><span class="line">GR:  mov result,eax&#125;</span><br><span class="line"></span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行图：<br><img src="https://img-blog.csdnimg.cn/20190530130512120.png" alt="avatar"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以下为我个人写的代码：&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="C语言" scheme="https://lzcxfz.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
      <category term="汇编" scheme="https://lzcxfz.github.io/tags/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>汇编控制扬声器（蜂鸣器）</title>
    <link href="https://lzcxfz.github.io/2019/05/30/%E6%B1%87%E7%BC%96%EF%BC%8C%E6%8E%A7%E5%88%B6%E6%89%AC%E5%A3%B0%E5%99%A8%EF%BC%88%E8%9C%82%E9%B8%A3%E5%99%A8%EF%BC%89/"/>
    <id>https://lzcxfz.github.io/2019/05/30/汇编，控制扬声器（蜂鸣器）/</id>
    <published>2019-05-30T04:36:00.000Z</published>
    <updated>2019-08-26T06:38:18.900Z</updated>
    
    <content type="html"><![CDATA[<p>按下n 关闭扬声器 按下y打开扬声器</p><p>测试很多次了 代码检查过了  ，代码没问题，应该是需要在实地址方式dos平台才能实现效果</p><p>主要用于练习 输入输出指令</p><a id="more"></a><p>data segment<br>mess db 0dh,0ah,’shuru y dakai,shuru n guan’,0dh,0ah,’$’<br>messg db 0dh,0ah,’guanle’,0dh,0ah,’$’<br>messk db 0dh,0ah,’kaile’,0dh,0ah,’$’<br>messcw db 0dh,0ah,’shu ru cuo wu’,0dh,0ah,’$’<br>data ends<br>code segment<br>assume cs:code<br>start:<br>                mov ax,data<br>                mov ds,ax<br>                mov dx,offset mess<br>                mov ah,09h<br>                int 21h<br>                mov ah,01h<br>                int 21h<br>                cmp al,’y’<br>                je kai<br>                cmp al,’n’<br>                je guan<br>                mov dx,offset messcw<br>                mov ah,09h<br>                int 21h<br>                jmp jieshu<br>kai:        call on<br>                jmp jieshu<br>guan:   call off<br>jieshu:        mov ah,4ch<br>                int 21h<br>on proc<br>        push ax<br>        push dx<br>        in al,61h<br>        or al,03h<br>        out 61h,al<br>        mov dx,offset messk<br>        mov ah,09h<br>        int 21h<br>        pop ax<br>        pop dx<br>        ret<br>on endp<br>off proc<br>        push ax<br>        push dx<br>        in al,61h<br>        and al,0fch<br>        out 61h,al<br>        mov dx,offset messg<br>        mov ah,09h<br>        int 21h<br>        pop ax<br>        pop dx<br>        ret<br>off endp<br>code ends<br>end start<br><img src="https://img-blog.csdnimg.cn/20190530130927385.jpg" alt="avatar"><br><img src="https://img-blog.csdnimg.cn/20190530130915447.jpg" alt="avatar"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;按下n 关闭扬声器 按下y打开扬声器&lt;/p&gt;
&lt;p&gt;测试很多次了 代码检查过了  ，代码没问题，应该是需要在实地址方式dos平台才能实现效果&lt;/p&gt;
&lt;p&gt;主要用于练习 输入输出指令&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="汇编" scheme="https://lzcxfz.github.io/tags/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>在visual c环境下利用嵌入式汇编指令，完成对两个变量的求和，由c程序显示</title>
    <link href="https://lzcxfz.github.io/2019/05/28/%E5%9C%A8visual%20c%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%88%A9%E7%94%A8%E5%B5%8C%E5%85%A5%E5%BC%8F%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4%EF%BC%8C%E5%AE%8C%E6%88%90%E5%AF%B9%E4%B8%A4%E4%B8%AA%E5%8F%98%E9%87%8F%E7%9A%84%E6%B1%82%E5%92%8C%EF%BC%8C%E7%94%B1c%E7%A8%8B%E5%BA%8F%E6%98%BE%E7%A4%BA/"/>
    <id>https://lzcxfz.github.io/2019/05/28/在visual c环境下利用嵌入式汇编指令，完成对两个变量的求和，由c程序显示/</id>
    <published>2019-05-28T04:36:00.000Z</published>
    <updated>2019-08-26T07:06:17.648Z</updated>
    
    <content type="html"><![CDATA[<p>在visual c环境下利用嵌入式汇编指令，完成对两个变量的求和，由c程序显示</p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> var1,<span class="keyword">int</span> var2)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    a=<span class="number">1</span>;</span><br><span class="line">    b=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum(a,b));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> var1,<span class="keyword">int</span> var2)</span><span class="comment">//求和函数</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        _asm&#123;    <span class="comment">//visual c环境下嵌入汇编格式_as&#123;指令&#125;</span></span><br><span class="line">            mov eax,var1</span><br><span class="line">            mov ebx,var2</span><br><span class="line">            add eax,ebx</span><br><span class="line">            mov var1,eax</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> var1;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190528184306916.png" alt="avatar"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在visual c环境下利用嵌入式汇编指令，完成对两个变量的求和，由c程序显示&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="C语言" scheme="https://lzcxfz.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
      <category term="汇编" scheme="https://lzcxfz.github.io/tags/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
</feed>
